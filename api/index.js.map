{
  "version": 3,
  "sources": ["<stdin>", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/protected.tsx", "../app/auth.server/firebase-auth.ts", "../app/firebase.ts", "../app/auth.server/auth-session.ts", "../app/util/session/cookie-session.server.ts", "../app/auth.server/index.ts", "../app/routes/protected/index.tsx", "../app/routes/db-test.tsx", "../app/models/user.ts", "../app/controllers.server/controller-types.ts", "../app/controllers.server/users.ts", "../app/db.server/firestore-db.ts", "../app/db.server/index.ts", "../app/controllers.server/index.ts", "../app/routes/logout.tsx", "../app/routes/signup.tsx", "../app/routes/tester.tsx", "../app/routes/index.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// import type { EntryContext } from '@remix-run/node';\nimport type { EntryContext } from '@remix-run/react/dist/entry';\nimport { RemixServer } from '@remix-run/react';\nimport { renderToString } from 'react-dom/server';\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(<RemixServer context={remixContext} url={request.url} />);\n\n  responseHeaders.set('Content-Type', 'text/html');\n\n  return new Response('<!DOCTYPE html>' + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import { Link, Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration, useCatch } from '@remix-run/react';\nimport type { ReactElement } from 'react';\nimport type { MetaFunction } from '@remix-run/node';\n\nimport globalStylesUrl from '~/styles/global.css';\nimport darkStylesUrl from '~/styles/dark.css';\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'New Remix App',\n  viewport: 'width=device-width,initial-scale=1',\n});\n\nexport let links = () => {\n  return [\n    { rel: 'stylesheet', href: globalStylesUrl },\n    {\n      rel: 'stylesheet',\n      href: darkStylesUrl,\n      media: '(prefers-color-scheme: dark)',\n    },\n  ];\n};\n\nexport default function App() {\n  return (\n    <Document>\n      <Layout>\n        <Outlet />\n      </Layout>\n    </Document>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: any }) {\n  console.error(error);\n  return (\n    <Document>\n      <Layout>\n        <div>\n          <h1>There was an error</h1>\n          <p>{error.message}</p>\n          <hr />\n          <p>Hey, developer, you should replace this with what you want your users to see.</p>\n        </div>\n      </Layout>\n    </Document>\n  );\n}\n\nexport function CatchBoundary() {\n  let caught = useCatch();\n  let message;\n  switch (caught.status) {\n    case 401:\n      message = <p>Oops! Looks like you tried to visit a page that you do not have access to.</p>;\n      break;\n    case 404:\n      message = <p>Oops! Looks like you tried to visit a page that does not exist.</p>;\n      break;\n\n    default:\n      throw new Error(caught.data || caught.statusText);\n  }\n\n  return (\n    <Document>\n      <Layout>\n        <h1>\n          {caught.status}: {caught.statusText}\n        </h1>\n        {message}\n      </Layout>\n    </Document>\n  );\n}\n\nfunction Document({ children }: { children: ReactElement<any> | ReactElement<any>[] }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === 'development' && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n\nfunction Layout({ children }: { children: ReactElement<any> | ReactElement<any>[] }) {\n  return (\n    <div className=\"remix-app\">\n      <header className=\"remix-app__header\">\n        <div className=\"container remix-app__header-content\">\n          <Link to=\"/\" title=\"Remix\" className=\"remix-app__header-home-link\">\n            <RemixLogo />\n          </Link>\n          <nav aria-label=\"Main navigation\" className=\"remix-app__header-nav\">\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/signup\">Sign Up Page</Link>\n              </li>\n              <li>\n                <Link to=\"/protected\">Protected Page</Link>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      </header>\n      <div className=\"remix-app__main\">\n        <div className=\"container remix-app__main-content\">{children}</div>\n      </div>\n      <footer className=\"remix-app__footer\">\n        <div className=\"container remix-app__footer-content\">\n          <p>&copy; You!</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nfunction RemixLogo() {\n  return (\n    <svg\n      viewBox=\"0 0 659 165\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      aria-labelledby=\"remix-run-logo-title\"\n      role=\"img\"\n      width=\"106\"\n      height=\"30\"\n      fill=\"currentColor\"\n    >\n      <title id=\"remix-run-logo-title\">Remix Logo</title>\n      <path d=\"M0 161V136H45.5416C53.1486 136 54.8003 141.638 54.8003 145V161H0Z M133.85 124.16C135.3 142.762 135.3 151.482 135.3 161H92.2283C92.2283 158.927 92.2653 157.03 92.3028 155.107C92.4195 149.128 92.5411 142.894 91.5717 130.304C90.2905 111.872 82.3473 107.776 67.7419 107.776H54.8021H0V74.24H69.7918C88.2407 74.24 97.4651 68.632 97.4651 53.784C97.4651 40.728 88.2407 32.816 69.7918 32.816H0V0H77.4788C119.245 0 140 19.712 140 51.2C140 74.752 125.395 90.112 105.665 92.672C122.32 96 132.057 105.472 133.85 124.16Z\" />\n      <path d=\"M229.43 120.576C225.59 129.536 218.422 133.376 207.158 133.376C194.614 133.376 184.374 126.72 183.35 112.64H263.478V101.12C263.478 70.1437 243.254 44.0317 205.11 44.0317C169.526 44.0317 142.902 69.8877 142.902 105.984C142.902 142.336 169.014 164.352 205.622 164.352C235.83 164.352 256.822 149.76 262.71 123.648L229.43 120.576ZM183.862 92.6717C185.398 81.9197 191.286 73.7277 204.598 73.7277C216.886 73.7277 223.542 82.4317 224.054 92.6717H183.862Z\" />\n      <path d=\"M385.256 66.5597C380.392 53.2477 369.896 44.0317 349.672 44.0317C332.52 44.0317 320.232 51.7117 314.088 64.2557V47.1037H272.616V161.28H314.088V105.216C314.088 88.0638 318.952 76.7997 332.52 76.7997C345.064 76.7997 348.136 84.9917 348.136 100.608V161.28H389.608V105.216C389.608 88.0638 394.216 76.7997 408.04 76.7997C420.584 76.7997 423.4 84.9917 423.4 100.608V161.28H464.872V89.5997C464.872 65.7917 455.656 44.0317 424.168 44.0317C404.968 44.0317 391.4 53.7597 385.256 66.5597Z\" />\n      <path d=\"M478.436 47.104V161.28H519.908V47.104H478.436ZM478.18 36.352H520.164V0H478.18V36.352Z\" />\n      <path d=\"M654.54 47.1035H611.788L592.332 74.2395L573.388 47.1035H527.564L568.78 103.168L523.98 161.28H566.732L589.516 130.304L612.3 161.28H658.124L613.068 101.376L654.54 47.1035Z\" />\n    </svg>\n  );\n}\n", "import { Form, Outlet, useLoaderData } from '@remix-run/react';\nimport type { LoaderFunction } from '@remix-run/node';\nimport { auth } from '~/auth.server';\n\nexport let meta = () => {\n  return {\n    title: 'Protected Page',\n  };\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  // page requires admin user role for access\n  await auth.requireUser(request, 'admin', '/');\n\n  // get the current auth user for the page\n  return await auth.user(request);\n};\n\nexport default function Secrets() {\n  const user = useLoaderData() || { username: 'foo', id: 'bar', name: 'baz', role: 'shazam' };\n\n  return (\n    <div className=\"remix__page\">\n      <main>\n        <h2>Protected Page</h2>\n        <p>Hello {user.name}</p>\n        <Form method=\"post\" action=\"/logout\">\n          <button>Logout</button>\n        </Form>\n        <section>\n          <h3>User Details</h3>\n          <table>\n            <thead>\n              <tr>\n                <th>Field</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>id</td>\n                <td>{user.id}</td>\n              </tr>\n              <tr>\n                <td>username</td>\n                <td>{user.username}</td>\n              </tr>\n              <tr>\n                <td>name</td>\n                <td>{user.name}</td>\n              </tr>\n              <tr>\n                <td>role</td>\n                <td>{user.role}</td>\n              </tr>\n            </tbody>\n          </table>\n        </section>\n        <section>\n          <h3>DB Users</h3>\n          <Outlet />\n        </section>\n      </main>\n    </div>\n  );\n}\n", "import type { DecodedIdToken } from 'firebase-admin/auth';\nimport { json, redirect } from '@remix-run/node';\nimport { auth, restApiSignInUrl } from '~/firebase';\nimport type { AppError } from '~/util';\nimport type { Auth, AuthSession, AuthUser } from './auth-types';\n\n/**\n * Firebase implementation of Auth Interface\n */\nexport class FirebaseAuth implements Auth<AuthUser> {\n  constructor(private session: AuthSession) {}\n\n  async createAccount(user: AuthUser, redirectTo?: string): Promise<Response> {\n    if (!user?.username || !user?.password) {\n      return json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'auth/createAccount',\n          errorMessage: `Could not create the account - missing params`,\n        },\n        {\n          status: 422,\n        }\n      );\n    }\n\n    try {\n      const newUser = await auth.createUser({ email: user.username, password: user.password });\n      if (redirectTo) {\n        return redirect(redirectTo);\n      } else {\n        return json(\n          { status: 'success', user: newUser },\n          {\n            status: 201,\n          }\n        );\n      }\n    } catch (error) {\n      throw json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'auth/createAccount',\n          errorMessage: `Could not create the account - ${error}`,\n        },\n        {\n          status: 500,\n        }\n      );\n    }\n  }\n\n  async login(user: AuthUser): Promise<Response> {\n    if (!user?.username || !user?.password) {\n      return json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'auth/login',\n          errorMessage: `Could not login - missing params`,\n        },\n        {\n          status: 422,\n        }\n      );\n    }\n\n    try {\n      const headers: Headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const req: Request = new Request(restApiSignInUrl, {\n        method: 'post',\n        headers,\n        body: JSON.stringify({\n          email: user.username,\n          password: user.password,\n          returnSecureToken: true,\n        }),\n      });\n      const authResponse: Response = await fetch(req);\n      const credentials: any = await authResponse.json();\n\n      // check for error\n      if (credentials.error) {\n        return json(\n          {\n            status: 'error',\n            errorCode: 'auth/login',\n            errorMessage: `Invalid username or password`,\n          },\n          {\n            status: 422,\n          }\n        );\n      }\n\n      // get the user to retrieve any custom claims (e.g. role)\n      const firebaseUser = await auth.getUser(credentials.localId);\n\n      // expires in 5 days\n      const expiresIn: number = 60 * 60 * 24 * 5 * 1000;\n\n      // Create the session cookie. This will also verify the ID token in the process.\n      // The session cookie will have the same claims as the ID token.\n      // To only allow session cookie setting on recent sign-in, auth_time in ID token\n      // can be checked to ensure user was recently signed in before creating a session cookie.\n      const sessionIdToken: string = await auth.createSessionCookie(credentials.idToken, {\n        expiresIn,\n      });\n\n      const sessionUser: AuthUser = {\n        id: firebaseUser.uid,\n        username: firebaseUser.email,\n        name: firebaseUser.displayName,\n        role: firebaseUser.customClaims?.role,\n      };\n\n      return this.session.createAuthSession({\n        idToken: sessionIdToken,\n        user: sessionUser,\n      });\n    } catch (error) {\n      // TODO: look into a modular logging package\n      console.error('auth/login', `Could not create the session cookie - ${error}`);\n      return json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'auth/login',\n          errorMessage: `There was a problem logging in`,\n        },\n        {\n          status: 500,\n        }\n      );\n    }\n  }\n\n  logout(request: Request, redirectTo = '/'): Promise<Response> {\n    return this.session.destroyAuthSession(request, ['idToken', 'user'], redirectTo);\n  }\n\n  async exists(user: AuthUser): Promise<boolean> {\n    try {\n      if (await auth.getUserByEmail(user.username)) {\n        return true;\n      }\n    } catch (error) {\n      throw json<AppError>(\n        {\n          status: 'exception',\n          errorCode: 'auth/exists',\n          errorMessage: `Could not check for account - ${error}`,\n        },\n        { status: 500 }\n      );\n    }\n\n    return false;\n  }\n\n  async requireUser(request: Request, role: string | null = null, redirectTo?: string): Promise<Response> {\n    const session = await this.session.getAuthSession(request);\n    const sessionIdToken = session.get('idToken');\n    let decodedClaims: DecodedIdToken;\n\n    if (sessionIdToken && typeof sessionIdToken === 'string') {\n      try {\n        decodedClaims = await auth.verifySessionCookie(sessionIdToken);\n      } catch (error) {\n        // Failed verification (e.g. Firebase session cookie revoked) -> unset session vars\n        throw await this.session.destroyAuthSession(request, ['idToken', 'user'], redirectTo ? redirectTo : undefined);\n      }\n\n      if (!role || role === decodedClaims?.role) {\n        return json(\n          { status: 'success' },\n          {\n            status: 200,\n          }\n        );\n      }\n    }\n\n    if (redirectTo) {\n      throw redirect(redirectTo);\n    } else {\n      throw json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'auth/requireUser',\n          errorMessage: `Unauthorized access`,\n        },\n        {\n          status: 401,\n        }\n      );\n    }\n  }\n\n  async user(request: Request): Promise<AuthUser | null> {\n    const session = await this.session.getAuthSession(request);\n    const user: AuthUser = JSON.parse(session.get('user') || null);\n    return user;\n  }\n}\n", "import { cert, initializeApp, getApps, getApp } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\n\nimport type { App, ServiceAccount } from 'firebase-admin/app';\nimport type { Auth } from 'firebase-admin/auth';\nimport type { Firestore } from 'firebase-admin/firestore';\n\nlet app: App;\nlet auth: Auth;\nlet restApiSignInUrl = '';\nlet db: Firestore;\n\nif (process.env.NODE_ENV === 'development') {\n  app = getApps().length === 0 ? initializeApp({ projectId: 'demo-remix-app' }) : getApp();\n  restApiSignInUrl = `http://localhost:9099/identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=123`;\n} else {\n  if (process.env.FIREBASE_SERVICE_ACCOUNT_KEY === undefined) {\n    throw Error('Missing FIREBASE_SERVICE_ACCOUNT_KEY');\n  }\n\n  if (process.env.FIREBASE_WEB_API_KEY === undefined) {\n    throw Error('Missing FIREBASE_WEB_API_KEY');\n  }\n\n  const serviceAccount: ServiceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);\n  app = getApps().length === 0 ? initializeApp({ credential: cert(serviceAccount) }) : getApp();\n  restApiSignInUrl = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${process.env.FIREBASE_WEB_API_KEY}`;\n}\n\nauth = getAuth(app);\ndb = getFirestore(app);\n\nexport { app, auth, db, restApiSignInUrl };\n", "import { json, redirect } from '@remix-run/node';\nimport { getSession, commitSession } from '~/util/session';\nimport type { Session } from '@remix-run/node';\nimport type { AuthSession } from './auth-types';\n\nexport const authSession: AuthSession = {\n  getAuthSession(request: Request): Promise<Session> {\n    return getSession(request.headers.get('Cookie'));\n  },\n\n  async createAuthSession(data: any, redirectTo?: string): Promise<Response> {\n    try {\n      const session: Session = await getSession();\n\n      for (const key in data) {\n        if (typeof data[key] === 'string') {\n          session.set(key, data[key]);\n        } else {\n          session.set(key, JSON.stringify(data[key]));\n        }\n      }\n\n      if (redirectTo) {\n        return redirect(redirectTo, {\n          headers: {\n            'Set-Cookie': await commitSession(session),\n          },\n        });\n      } else {\n        return json(\n          { status: 'success' },\n          {\n            headers: {\n              'Set-Cookie': await commitSession(session),\n            },\n            status: 201,\n          }\n        );\n      }\n    } catch (error) {\n      return json(\n        {\n          errorCode: 'session/create',\n          errorMessage: `Could not create user session: ${error}`,\n        },\n        {\n          status: 500,\n        }\n      );\n    }\n  },\n\n  async destroyAuthSession(request: Request, keys: string[] | string, redirectTo?: string): Promise<Response> {\n    const session: Session = await getSession(request.headers.get('Cookie'));\n\n    if (typeof keys === 'string') {\n      session.unset(keys);\n    } else {\n      keys.forEach((key) => session.unset(key));\n    }\n    if (redirectTo) {\n      return redirect(redirectTo, {\n        headers: {\n          'Set-Cookie': await commitSession(session),\n        },\n      });\n    } else {\n      return json(\n        { status: 'success' },\n        {\n          headers: {\n            'Set-Cookie': await commitSession(session),\n          },\n          status: 204,\n        }\n      );\n    }\n  },\n};\n", "import { createCookieSessionStorage } from '@remix-run/node';\n\nconst sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret) {\n  throw new Error('SESSION_SECRET must be set');\n}\n\nexport const { getSession, commitSession, destroySession } = createCookieSessionStorage({\n  cookie: {\n    name: '__session',\n    // normally you want this to be `secure: true`\n    // but that doesn't work on localhost for Safari\n    // https://web.dev/when-to-use-local-https/\n    secure: process.env.NODE_ENV === 'production',\n    secrets: [sessionSecret],\n    sameSite: 'lax', // to help with CSRF\n    path: '/',\n    maxAge: 60 * 60 * 24 * 5, // 5 days\n    httpOnly: true,\n  },\n});\n", "import { FileAuth } from './file-auth';\nimport { FirebaseAuth } from './firebase-auth';\nimport { authSession } from './auth-session';\nimport type { Auth, AuthUser } from './auth-types';\n\n/**\n * Initialized auth object\n */\nconst auth: Auth<AuthUser> = new FirebaseAuth(authSession);\n// const auth: AuthInterface<AuthUserType> = new FileAuth(authSession);\n\nexport { auth };\n", "export default function SecretData() {\n  return <h2>Some Secret Stuff</h2>;\n}\n", "import { json } from '@remix-run/node';\nimport { users } from '~/controllers.server';\nimport type { LoaderFunction } from '@remix-run/node';\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const url = new URL(request.url);\n  const op = url.searchParams.get('op');\n\n  let user;\n\n  switch (op) {\n    case 'create':\n      // create user\n      user = { id: 'testid', username: 'test@example.com', role: 'guest', preferences: { theme: 'dark' } };\n      return json(await users.create(user));\n      break;\n    case 'read':\n      // geta a user by username or id\n      // return json(await users.getByUsername('admin@example.com'));\n      return json(await users.getById('Wv3jQLi5CUUlsBfeiJLOjTta5wWP'));\n      break;\n    case 'update':\n      // update user\n      user = { id: 'testid', role: 'admin', preferences: { theme: 'light' } };\n      return json(await users.update(user));\n      // return null;\n      break;\n    case 'delete':\n      // delete user\n      user = { id: 'testid' };\n      return json(await users.delete(user));\n      break;\n    default:\n      // execute a custom query\n      // return json(\n      //   await users.read({\n      //     collection: '', // TODO: find a more _elegant_ solution for this\n      //     where: { field: 'role', operator: '!=', value: 'super' },\n      //     limit: { max: 2 },\n      //   })\n      // );\n      // fetch all users by role\n      return json(await users.allByRole('admin'));\n  }\n};\n", "type PreferenceType = {\n  theme?: string;\n};\n\n/**\n * Represents a user in the system.\n */\nexport class User {\n  /**\n   * Creates a new User.\n   * @param {string} username for the user\n   * @param {string} role role for the user\n   * @param {string} id unique id for the user\n   * @param {PreferenceType} preferences any user preferences\n   */\n  constructor(\n    private username: string = '',\n    private role: string = '',\n    private id: string = '',\n    private preferences?: PreferenceType | null\n  ) {\n    this.preferences = preferences || null;\n  }\n\n  /**\n   * Get username\n   * @returns {string} the username\n   */\n  getUsername(): string {\n    return this.username;\n  }\n\n  /**\n   * Set username\n   * @param {string} username the new username\n   */\n  setUsername(username: string): void {\n    this.username = username;\n  }\n\n  /**\n   * Get user rols\n   * @returns {string} the user role\n   */\n  getRole(): string {\n    return this.role;\n  }\n\n  /**\n   * Set user role\n   * @param {string} role the new user role\n   */\n  setRole(role: string): void {\n    this.role = role;\n  }\n\n  /**\n   * Get user id\n   * @returns {string} the unique user id\n   */\n  getId(): string {\n    return this.id;\n  }\n\n  /**\n   * Set user id\n   * @param {string} id unique id for the user\n   */\n  setId(id: string): void {\n    this.id = id;\n  }\n\n  /**\n   * Get user preferences\n   * @returns {PreferenceType} a shallow copy of the user preferences\n   */\n  getPreferences(): PreferenceType {\n    return { ...this.preferences };\n  }\n\n  /**\n   * Set user preferences\n   * @param {PreferenceType} prefs preferences for the user\n   */\n  setPreferences(prefs: PreferenceType): void {\n    this.preferences = prefs;\n  }\n}\n", "/**\n * Abstract DBResult to represent results from any database.\n */\nexport class DBResult {\n  /**\n   * Instantiates a new DBResult object.\n   * @param {object[]} records? optional initial array of entities for this DB result\n   * @param {number} affected? the number of records\n   */\n  constructor(protected records: object[], protected affected: number = 0) {\n    this.records = records || [];\n    this.affected = affected || this.records.length;\n  }\n\n  /**\n   * The number of entities affected in this DB result\n   * @returns {number} the number of entities affected in this result\n   */\n  count(): number {\n    return this.affected;\n  }\n  /**\n   * The entities in this DB result\n   * @returns {object[]} an arry of entity objects in this result\n   */\n  rows(): object[] {\n    return this.records;\n  }\n}\n\n/**\n * Represents the type used to define a where/having condition\n */\nexport type Condition = {\n  field: unknown;\n  operator: unknown;\n  value: unknown;\n};\n\nexport type OrderByOptions = {\n  field: string;\n  direction?: 'asc' | 'desc';\n};\n\nexport type LimitOptions = {\n  max: number;\n  offset?: number;\n};\n\n/**\n * Represents the available query options for the DBInterface\n */\nexport type QueryOptions = {\n  /**\n   * The name assigned to the collection of entities (e.g. table name, collection ref, etc.)\n   */\n  collection: string;\n  where?: Condition;\n  groupBy?: string;\n  orderBy?: OrderByOptions;\n  limit?: LimitOptions;\n  having?: Condition;\n};\n\n/**\n * Required interface for database support in the application.\n */\nexport interface DB {\n  /**\n   * Queries the database.\n   * @param {QueryOptions} options optional modifiers for the query\n   * @returns {DBResult}  A DBResult object\n   */\n  executeQuery(queryOptions?: QueryOptions): Promise<DBResult>;\n  /**\n   * Inserts an entity or entities into the database\n   * @template Model\n   * @param {Model | Model[]} model a generic parameter that represents the desired model or an array of the desired models to insert\n   * @param {QueryOptions} queryOptions optional modifiers for the query\n   * @returns {DBResult}  A DBResult object\n   */\n  executeInsert(model: object | object[], queryOptions?: QueryOptions): Promise<DBResult>;\n  /**\n   * Updates an entity in the database\n   * @template Model\n   * @param {Model} model a generic parameter that represents the desired model to update\n   * @param {QueryOptions} queryOptions optional modifiers for the query\n   * @returns {DBResult}  A DBResult object\n   */\n  executeUpdate(model: object, queryOptions?: QueryOptions): Promise<DBResult>;\n  /**\n   * Deletes an entity from the database\n   * @template Model\n   * @param {Model} model a generic parameter that represents the desired model to delete\n   * @param {QueryOptions} queryOptions optional modifiers for the query\n   * @returns {DBResult}  A DBResult object\n   */\n  executeDelete(model: object, queryOptions?: QueryOptions): Promise<DBResult>;\n}\n\n/**\n * Abstract class for all controllers to extend\n */\nexport abstract class Controller<ModelData, Model> {\n  /**\n   * Instantiates a new controller.\n   * @param {string} collection the name used to represent the collection of models in the database\n   * @param {DB} db the database reference\n   */\n  constructor(protected collection: string, protected db: DB) {}\n  abstract create(modelData: ModelData): Promise<Model>;\n  abstract read(options?: QueryOptions): Promise<Model[]>;\n  abstract update(modelData: ModelData): Promise<Model | Model[]>;\n  abstract delete(modelData: ModelData): Promise<Model | Model[]>;\n}\n", "import { User } from '~/models';\nimport { Controller, DB, QueryOptions } from './controller-types';\nimport type { DBResult } from './controller-types';\n\ntype UserType = {\n  id?: string;\n  username?: string;\n  role?: string;\n  preferences?: object;\n};\n\n/**\n * Controller class for working with User model objects\n */\nexport class Users extends Controller<UserType, User> {\n  /**\n   * Creates a new Users controller with 'users' collection param\n   * @see AbstractController.constructor()\n   * @param {DB} db the database reference\n   */\n  constructor(db: DB) {\n    super('users', db);\n  }\n\n  /**\n   * Creates a new user in the database; requires a username\n   * @param {UserType} userData the user model to create in the database\n   * @returns {User} the user model with any updated default|derived field values\n   * @throws Will throw an error if username is empty, user already exists, or database call fails\n   */\n  async create(userData: UserType): Promise<User> {\n    if (userData.username) {\n      if (await this.getByUsername(userData.username)) {\n        throw Error(`Users/createUser - user already exists`);\n      }\n\n      if (!userData.role) {\n        userData.role = 'guest';\n      }\n\n      try {\n        const result: DBResult = await this.db.executeInsert(userData, { collection: this.collection });\n        const u = result.rows().pop() as UserType;\n\n        return new User(u.username, u?.role, u?.id, u?.preferences);\n      } catch (error) {\n        throw Error(`Users/createUser - ${error}`);\n      }\n    } else {\n      throw Error(`Users/createUser - could not create user, missing required field`);\n    }\n  }\n\n  /**\n   * Provides a way to submit a custom users query to the database\n   * @param {QueryOptions} options query options\n   * @returns {User[]} an array of matched users\n   */\n  async read(options?: QueryOptions): Promise<User[]> {\n    const records = await this.db.executeQuery({ ...options, collection: this.collection });\n\n    return records.rows().map((record) => {\n      const u = record as UserType;\n      return new User(u.username, u.role, u.id, u.preferences);\n    });\n  }\n\n  /**\n   * Updates a user in the database; requires an id\n   * @param {UserType} userData the user model to update in the database\n   * @returns {User} the user that has been updated\n   * @throws Will throw an error if id is empty, user does not exist, or database call fails\n   */\n  async update(userData: UserType): Promise<User | User[]> {\n    if (userData.id) {\n      if (!(await this.getById(userData.id))) {\n        throw Error(`Users/updateUser - user does not exist`);\n      }\n\n      try {\n        const result: DBResult = await this.db.executeUpdate(userData, {\n          collection: this.collection,\n          where: { field: 'id', operator: '==', value: userData.id },\n        });\n\n        const user = ((record) => {\n          const u = record as UserType;\n          return new User(u.username as string, u.role, u.id, u.preferences);\n        })(result.rows().pop());\n\n        return user;\n      } catch (error) {\n        throw Error(`Users/updateUser - ${error}`);\n      }\n    } else {\n      throw Error(`Users/updateUser - could not update user, missing required field`);\n    }\n  }\n\n  /**\n   * Delete a user in the database; requires an id\n   * @param {UserType} userData the user model to delete in the database\n   * @returns {User | User[]} the user(s) that have been deleted\n   * @throws Will throw an error if id is empty, user does not exist, or database call fails\n   */\n  async delete(userData: UserType): Promise<User | User[]> {\n    if (userData.id) {\n      if (!(await this.getById(userData.id))) {\n        throw Error(`Users/deleteUser - user does not exist`);\n      }\n\n      try {\n        const result: DBResult = await this.db.executeDelete(\n          {\n            id: userData.id,\n          },\n          { collection: this.collection, where: { field: 'id', operator: '==', value: userData.id } }\n        );\n\n        const user = ((record) => {\n          const u = record as UserType;\n          return new User(u.username as string, u.role, u.id, u.preferences);\n        })(result.rows().pop());\n\n        return user;\n      } catch (error) {\n        throw Error(`Users/deleteUser - ${error}`);\n      }\n    } else {\n      throw Error(`Users/deleteUser - could not update user, missing required field`);\n    }\n  }\n\n  /**\n   * Get a user by the id\n   * @param {string} id the id of the user to retrieve\n   * @returns {User | null} the user retrieved from the database or null if no match was found\n   */\n  async getById(id: string): Promise<User | null> {\n    const result = await this.db.executeQuery({\n      collection: this.collection,\n      where: { field: 'id', operator: '==', value: id },\n    });\n\n    if (result.count() === 1) {\n      const u = result.rows().pop() as UserType;\n      return new User(u.username as string, u.role, u.id, u.preferences);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get a user by the username\n   * @param {string} username the username of the user to retrieve\n   * @returns {User | null} the user retrieved from the database or null if no match was found\n   */\n  async getByUsername(username: string): Promise<User | null> {\n    const result = await this.db.executeQuery({\n      collection: this.collection,\n      where: { field: 'username', operator: '==', value: username },\n    });\n\n    if (result.count() === 1) {\n      const u = result.rows().pop() as UserType;\n      return new User(u.username as string, u.role, u.id, u.preferences);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Facade method for all({ role })\n   * @param role the role to filter by\n   * @returns {User[]} an array of matched users\n   */\n  allByRole(role: string) {\n    return this.read({ collection: this.collection, where: { field: 'role', operator: '==', value: role } });\n  }\n}\n", "import { db } from '~/firebase';\nimport { DBResult } from '~/controllers.server';\nimport type { DocumentData, Firestore, OrderByDirection, Query, WhereFilterOp } from 'firebase-admin/firestore';\nimport type { DB, QueryOptions, OrderByOptions } from '~/controllers.server';\n\nexport class FirestoreDB implements DB {\n  constructor(private db: Firestore) {}\n\n  async executeQuery(options: QueryOptions): Promise<DBResult> {\n    try {\n      const collectionRef = db.collection(options.collection);\n      let query: Query = collectionRef;\n\n      if (options.where) {\n        const w = options.where;\n        query = query.where(w.field as string, w.operator as WhereFilterOp, w.value);\n      }\n      if (options.orderBy) {\n        const o: OrderByOptions = options.orderBy;\n        query = query.orderBy(o.field, o?.direction as OrderByDirection);\n      }\n      if (options.limit) {\n        const l = options.limit;\n        query = query.limit(l.max);\n        if (l.offset) {\n          query = query.offset(l.offset);\n        }\n      }\n\n      const models: object[] = (await query.get()).docs.map((doc) => {\n        return { id: doc.id, ...doc.data() };\n      });\n\n      return new DBResult(models);\n    } catch (error) {\n      // TODO: update error logging\n      console.error('firestoreDB/executeQuery', error);\n    }\n    return new DBResult([]);\n  }\n\n  async executeInsert(model: any, options: QueryOptions): Promise<DBResult> {\n    try {\n      const collectionRef = db.collection(options.collection);\n      let inserted: DocumentData | undefined;\n\n      if (Object.getOwnPropertyDescriptor(model, 'id')) {\n        inserted = await collectionRef.doc(model['id']).set(model);\n      } else {\n        inserted = (await (await collectionRef.add(model)).get()).data();\n      }\n\n      if (inserted) {\n        return new DBResult([inserted]);\n      } else {\n        return new DBResult([]);\n      }\n    } catch (error) {\n      // TODO: update error logging\n      console.error('firestoreDB/executeInsert', error);\n    }\n    return new DBResult([]);\n  }\n\n  async executeUpdate(model: any, options: QueryOptions): Promise<DBResult> {\n    try {\n      const collectionRef = db.collection(options.collection);\n      const query = collectionRef.where(\n        options.where?.field as string,\n        options.where?.operator as WhereFilterOp,\n        options.where?.value\n      );\n      const docs = await query.get();\n      const results: object[] = [];\n\n      if (docs.size > 0) {\n        await docs.forEach(async (doc) => {\n          doc.ref.update(model);\n          // hack to deal with Firestore's lack of 'return updated/deleted document'\n          results.push({ ...doc.data(), ...model });\n        });\n      }\n\n      return new DBResult(results);\n    } catch (error) {\n      // TODO: update error logging\n      console.error('firestoreDB/executeDelete', error);\n    }\n    return new DBResult([]);\n  }\n\n  async executeDelete(model: any, options: QueryOptions): Promise<DBResult> {\n    try {\n      const collectionRef = db.collection(options.collection);\n      const query = collectionRef.where(\n        options.where?.field as string,\n        options.where?.operator as WhereFilterOp,\n        options.where?.value\n      );\n      const docs = await query.get();\n      const results: object[] = [];\n\n      if (docs.size > 0) {\n        await docs.forEach((doc) => {\n          doc.ref.delete({ exists: true });\n          results.push(doc.data());\n        });\n      }\n      return new DBResult(results);\n    } catch (error) {\n      // TODO: update error logging\n      console.error('firestoreDB/executeDelete', error);\n    }\n    return new DBResult([]);\n  }\n\n  /**\n   * This method provides direct access to the underlying database (Firestore)\n   * object. WARNING: making use of the direct databas access feature may impact\n   * the interchangeability of databases in your application; use this feature wisely.\n   * @returns {FirebaseFirestore.Firestore} the Firestore instance\n   */\n  getDb(): FirebaseFirestore.Firestore {\n    return this.db;\n  }\n}\n\nexport const firestoreDb = new FirestoreDB(db);\n", "import type { DB } from '~/controllers.server';\nimport { firestoreDb } from './firestore-db';\n\n/**\n * Initialized database interface object\n */\nconst db: DB = firestoreDb;\n\nexport { db };\n", "import { Users } from './users';\nimport { db } from '~/db.server';\nimport { DBResult } from './controller-types';\nimport type { Condition, DB, LimitOptions, OrderByOptions, QueryOptions } from './controller-types';\n\n/**\n * Initialized users controller\n */\nconst users: Users = new Users(db);\n\nexport { DBResult, users };\nexport type { Condition, DB, LimitOptions, OrderByOptions, QueryOptions };\n", "import { redirect } from '@remix-run/node';\nimport type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport { auth } from '~/auth.server';\n\nexport const loader: LoaderFunction = async () => {\n  // not expecting direct access, so redirect away\n  return redirect('/');\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  return auth.logout(request, '/');\n};\n", "import { useRef } from 'react';\nimport { Form, useActionData } from '@remix-run/react';\nimport { json, redirect } from '@remix-run/node';\nimport { auth } from '~/auth.server';\nimport type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport type { AppError } from '~/util';\nimport { users } from '~/controllers.server';\n\nexport let meta = () => {\n  return {\n    title: 'Sign Up Page',\n  };\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  try {\n    const form = await request.formData();\n\n    // TODO: implement proper form validation\n    const email: any = form.get('email');\n    const password: any = form.get('password');\n    const confirm: any = form.get('confirm');\n\n    // TODO: form validation\n    if (!email || email.trim() === '') {\n      return json<AppError>(\n        {\n          status: 'validationFailure',\n          errorCode: 'signup/invalid-email',\n          errorMessage: 'Email field cannot be empty',\n        },\n        { status: 400 }\n      );\n    }\n\n    if (!password || !confirm || password.trim() === '' || password !== confirm) {\n      return json<AppError>(\n        {\n          status: 'validationFailure',\n          errorCode: 'signup/invalid-password',\n          errorMessage: 'Password fields cannot be empty and must match',\n        },\n        { status: 400 }\n      );\n    }\n\n    // TODO: CSRF check\n\n    // Create the account\n    const res = await (await auth.createAccount({ username: email, password })).json();\n    // Create the user in the database\n    await users.create({ id: res.user.uid, role: 'guest', username: res.user.email, preferences: { theme: 'dark' } });\n    // Redirect to the home/login page\n    return redirect('/');\n  } catch (error) {\n    console.error('signup/general', `Could not create the account - ${error}`);\n    return json<AppError>(\n      {\n        status: 'error',\n        errorCode: 'signup/general',\n        errorMessage: 'There was a problem creating the account',\n      },\n      { status: 500 }\n    );\n  }\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  // redirect if already signed in\n  if (await auth.user(request)) {\n    return redirect('/');\n  } else {\n    return null;\n  }\n};\n\nexport default function Index() {\n  const actionError = useActionData();\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n  const confirmRef = useRef(null);\n\n  return (\n    <div className=\"remix__page\">\n      <main>\n        <h2>Sign Up Page</h2>\n        <p>Everyone can view the home page.</p>\n\n        <section>\n          <Form className=\"remix__form\" method=\"post\">\n            <h3>Sign Up Form</h3>\n            <label htmlFor=\"email\">Email:</label>\n            <input type=\"text\" id=\"email\" name=\"email\" ref={emailRef} />\n            <br />\n            <label htmlFor=\"email\">Password:</label>\n            <input type=\"password\" id=\"password\" name=\"password\" ref={passwordRef} />\n            <br />\n            <label htmlFor=\"email\">Confirm Password:</label>\n            <input type=\"password\" id=\"confirm\" name=\"confirm\" ref={confirmRef} />\n            <br />\n            <button type=\"submit\">Sign Up</button>\n            {actionError?.errorCode && (\n              <p>\n                <em>Sign up failed: {actionError.errorMessage}</em>\n              </p>\n            )}\n          </Form>\n        </section>\n      </main>\n    </div>\n  );\n}\n", "import { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { users } from '~/controllers.server';\nimport type { LoaderFunction } from '@remix-run/node';\n\nexport const loader: LoaderFunction = async () => {\n  return json(await users.getById('Wv3jQLi5CUUlsBfeiJLOjTta5wWP'));\n};\n\nexport default function Tester() {\n  const user = useLoaderData();\n  console.log(user);\n  return (\n    <div className=\"remix__page\">\n      <main>TESTER</main>\n      {user && <div>some user{user.username}</div>}\n    </div>\n  );\n}\n", "import { useRef } from 'react';\nimport { Form, useActionData, useLoaderData, Link } from '@remix-run/react';\nimport { json } from '@remix-run/node';\nimport { auth } from '~/auth.server';\nimport type { ActionFunction, LoaderFunction } from '@remix-run/node';\nimport type { AppError } from '~/util';\n\nexport let meta = () => {\n  return {\n    title: 'Home Page',\n  };\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  try {\n    const form = await request.formData();\n\n    // TODO: implement proper form validation\n    const email: any = form.get('email');\n    const password: any = form.get('password');\n\n    // TODO: form validation\n    if (!email || email.trim() === '') {\n      return json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'signup/invalid-email',\n          errorMessage: 'Email field cannot be empty',\n        },\n        { status: 400 }\n      );\n    }\n\n    if (!password || password.trim() === '') {\n      return json<AppError>(\n        {\n          status: 'error',\n          errorCode: 'signup/invalid-password',\n          errorMessage: 'Password field cannot be empty',\n        },\n        { status: 400 }\n      );\n    }\n\n    // TODO: CSRF check\n    return auth.login({ username: email, password });\n  } catch (error) {\n    return json<AppError>(\n      {\n        status: 'error',\n        errorCode: 'login/general',\n        errorMessage: 'There was a problem logging in',\n      },\n      { status: 500 }\n    );\n  }\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  return await auth.user(request);\n};\n\nexport default function Index() {\n  const actionError = useActionData();\n  const user = useLoaderData();\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  return (\n    <div className=\"remix__page\">\n      <main>\n        <h2>Home Page</h2>\n        <p>Everyone can view the home page.</p>\n        {(user && (\n          <>\n            <p>\n              Hello {user.name}, you can now view the <Link to=\"/protected\">protected page.</Link>\n            </p>\n            <Form method=\"post\" action=\"/logout\">\n              <button>Logout</button>\n            </Form>\n          </>\n        )) || (\n          <section>\n            <Form className=\"remix__form\" method=\"post\">\n              <h3>Login Form</h3>\n              <label htmlFor=\"email\">Email:</label>\n              <input type=\"text\" id=\"email\" name=\"email\" ref={emailRef} />\n              <br />\n              <label htmlFor=\"email\">Password:</label>\n              <input type=\"password\" id=\"password\" name=\"password\" ref={passwordRef} />\n              <br />\n              <button type=\"submit\">Login</button>\n              {actionError?.errorCode && (\n                <p>\n                  <em>Login failed: {actionError.errorMessage}</em>\n                </p>\n              )}\n            </Form>\n          </section>\n        )}\n      </main>\n    </div>\n  );\n}\n", "export default {'version':'8c7d54a0','entry':{'module':'/build/entry.client-C53OCUIZ.js','imports':['/build/_shared/chunk-QQXQO5U5.js','/build/_shared/chunk-FOBQCQPJ.js','/build/_shared/chunk-5KL4PAQL.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-4KQFWZOH.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/db-test':{'id':'routes/db-test','parentId':'root','path':'db-test','index':undefined,'caseSensitive':undefined,'module':'/build/routes/db-test-2ET3D5GN.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-IBZX4YCU.js','imports':['/build/_shared/chunk-ZPFOYRVQ.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/build/routes/logout-DOMDNNGV.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/protected':{'id':'routes/protected','parentId':'root','path':'protected','index':undefined,'caseSensitive':undefined,'module':'/build/routes/protected-WP5BEJS3.js','imports':['/build/_shared/chunk-ZPFOYRVQ.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/protected/index':{'id':'routes/protected/index','parentId':'routes/protected','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/protected/index-KHZKN6EH.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/signup':{'id':'routes/signup','parentId':'root','path':'signup','index':undefined,'caseSensitive':undefined,'module':'/build/routes/signup-TDYTJ6ZE.js','imports':['/build/_shared/chunk-ZPFOYRVQ.js','/build/_shared/chunk-HGYPKNEV.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/tester':{'id':'routes/tester','parentId':'root','path':'tester','index':undefined,'caseSensitive':undefined,'module':'/build/routes/tester-SJ22CV4V.js','imports':['/build/_shared/chunk-HGYPKNEV.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'cssBundleHref':undefined,'url':'/build/manifest-8C7D54A0.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/protected.tsx\";\nimport * as route2 from \"./routes/protected/index.tsx\";\nimport * as route3 from \"./routes/db-test.tsx\";\nimport * as route4 from \"./routes/logout.tsx\";\nimport * as route5 from \"./routes/signup.tsx\";\nimport * as route6 from \"./routes/tester.tsx\";\nimport * as route7 from \"./routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"unstable_cssModules\":false,\"unstable_cssSideEffectImports\":false,\"unstable_dev\":false,\"unstable_vanillaExtract\":false,\"v2_errorBoundary\":false,\"v2_meta\":false,\"v2_routeConvention\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  \n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/protected\": {\n      id: \"routes/protected\",\n      parentId: \"root\",\n      path: \"protected\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/protected/index\": {\n      id: \"routes/protected/index\",\n      parentId: \"routes/protected\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/db-test\": {\n      id: \"routes/db-test\",\n      parentId: \"root\",\n      path: \"db-test\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/signup\": {\n      id: \"routes/signup\",\n      parentId: \"root\",\n      path: \"signup\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/tester\": {\n      id: \"routes/tester\",\n      parentId: \"root\",\n      path: \"tester\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    }\n  };"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "meta", "import_react", "import_node", "import_node", "auth", "import_jsx_dev_runtime", "meta", "auth", "protected_exports", "import_jsx_dev_runtime", "loader", "import_node", "db", "db", "db", "db", "db", "loader", "loader", "import_node", "loader", "auth", "action", "loader", "meta", "import_react", "import_node", "import_jsx_dev_runtime", "meta", "action", "auth", "loader", "loader", "import_node", "import_react", "import_jsx_dev_runtime", "loader", "action", "Index", "loader", "meta", "import_react", "import_node", "import_jsx_dev_runtime", "meta", "action", "auth", "loader", "Index", "protected_exports"]
}
